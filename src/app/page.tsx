"use client";

import React, { useState } from "react";
import { Inter } from "next/font/google";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { useModal } from "@/hooks/useModal";
import { Modal } from "@/components/ui/Modal";
import { API_BASE_URL, PROGRAM_ITEMS, USER_ROLES } from "@/lib/constants";
import { FadeInSection } from "@/components/animations/FadeInSection";
import { FlyingCats } from "@/components/animations/FlyingCats";
import { UserRole } from "@/lib/types";
import { SequentialFadeIn } from "@/components/animations/SequentialFadeIn";

const inter = Inter({ subsets: ["latin"] });

// API service for participant registration
const participantService = {
  async create(participantData: {
    role: string;
    name: string;
    email: string;
    phone: string;
    city: string;
    school: string | null;
    class_number: number | null;
  }) {
    const response = await fetch(`${API_BASE_URL}/physicsday/participants`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify(participantData),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);
    }

    return response.json();
  }
};

export default function Home() {
  const [role, setRole] = useState<UserRole>("–®–∫–æ–ª—å–Ω–∏–∫");
  const [isOpen, modalContent, showModal, closeModal] = useModal();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    city: '',
    school: '',
    class: '',
    agreement: false
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }));
  };

  const validateForm = () => {
    const requiredFields = ['name', 'email', 'phone', 'city'];
    const emptyFields = requiredFields.filter(field => !formData[field as keyof typeof formData]);
    
    // For students, school and class are also required
    if (role === "–®–∫–æ–ª—å–Ω–∏–∫") {
      if (!formData.school || !formData.class) {
        emptyFields.push(...['school', 'class'].filter(field => !formData[field as keyof typeof formData]));
      }
    }
    
    if (emptyFields.length > 0) {
      showModal(
        'error',
        '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
        '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.'
      );
      return false;
    }

    if (!formData.agreement) {
      showModal(
        'error',
        '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–∏–µ',
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'
      );
      return false;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      showModal(
        'error',
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.'
      );
      return false;
    }

    // Validate class number for students
    if (role === "–®–∫–æ–ª—å–Ω–∏–∫" && formData.class) {
      const classNum = parseInt(formData.class, 10);
      if (isNaN(classNum) || classNum < 1 || classNum > 11) {
        showModal(
          'error',
          '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å',
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –æ—Ç 1 –¥–æ 11.'
        );
        return false;
      }
    }

    return true;
  };

  const handleSubmit = async (e: React.MouseEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Prepare data for API
      const apiData = {
        role: role,
        name: formData.name.trim(),
        email: formData.email.trim(),
        phone: formData.phone.trim(),
        city: formData.city.trim(),
        ...(role === "–®–∫–æ–ª—å–Ω–∏–∫" ? {
          school: formData.school.trim(),
          class_number: parseInt(formData.class, 10)
        } : {
          school: null,
          class_number: null
        })
      };

      // Send data to Django backend
      const result = await participantService.create(apiData);

      showModal(
        'success',
        '–ó–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!',
        <>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üéâ<br/><b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –æ–ª–∏–º–ø–∏–∞–¥—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã —Å–∞–π—Ç–∞.</b></>,
      );
      
      // Reset form
      setFormData({
        name: '',
        email: '',
        phone: '',
        city: '',
        school: '',
        class: '',
        agreement: false
      });
      setRole("–®–∫–æ–ª—å–Ω–∏–∫");

    } catch (error) {
      console.error('Registration error:', error);
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      
      if (error instanceof Error) {
        if (error.message.includes('Failed to fetch')) {
          errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else if (error.message.includes('400')) {
          errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π.';
        } else if (error.message.includes('500')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else {
          errorMessage = error.message;
        }
      }
      
      showModal(
        'error',
        '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        errorMessage
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <main className="font-sans text-gray-900 scroll-smooth">
      {/* Header */}
      <Header />

      {/* Hero Section */}
      <section id="about" className="relative h-screen bg-[#344EAD] text-white flex items-center justify-center pt-20">
        <FlyingCats />
        <div className="text-center px-4 max-w-4xl">
          <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold mb-6 leading-tight">
            29 —Å–µ–Ω—Ç—è–±—Ä—è 2025<br />
            –§–ò–ó–§–ï–°–¢
          </h1>
          <p className="text-xl sm:text-2xl md:text-3xl mb-4 font-medium">11:00 –ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å –ù–ì–£</p>
          <p className="text-base sm:text-lg md:text-xl text-gray-200 mb-8 leading-relaxed">
            –§–µ—Å—Ç–∏–≤–∞–ª—å –Ω–∞—É–∫–∏ &quot;–§–∏–∑–§–µ—Å—Ç&quot; ‚Äî –º–∞—Å—à—Ç–∞–±–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º–æ–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –º–æ–ª–æ–¥—ã–º–∏ —É—á–µ–Ω—ã–º–∏ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–≥–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Å —Ü–µ–ª—å—é –ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ —Ñ–∏–∑–∏–∫–∏ —Å—Ä–µ–¥–∏ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, –Ω–æ –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –µ—Å—Ç–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è, –ø—Ä–∏–æ–±—â–∏—Ç—å—Å—è –∫ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –Ω–∞—É–∫–µ, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—á–µ–Ω—ã–º–∏-–ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏.
          </p>
          <a href="#register" className="bg-white text-[#344EAD] font-semibold px-8 py-4 text-lg rounded-xl shadow-lg hover:bg-gray-100 transition-all duration-300 hover:shadow-xl">
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
          </a>
        </div>
      </section>

      {/* Program Section */}
      <section id="program" className="py-20 bg-gray-50">
        <FadeInSection>
          <h2 className="text-center text-3xl font-bold mb-12">–ü—Ä–æ–≥—Ä–∞–º–º–∞</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 px-4 max-w-6xl mx-auto">
            {PROGRAM_ITEMS.map(({title, image}, idx) => (
              <SequentialFadeIn key={idx} index={idx}>
                <div key={idx} className="relative h-64 rounded-xl overflow-hidden shadow-lg group">
                  <img
                    src={image}
                    alt={title}
                    className={`absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-105 ${title ? 'brightness-50' : ''}`}
                  />
                  <div className="relative z-10 p-4 text-white text-lg font-semibold">
                    {title}
                  </div>
                </div>
              </SequentialFadeIn>
            ))}
          </div>
        </FadeInSection>
      </section>

      {/* Additional Registration Section */}
      <section className="py-20 bg-gray-50">
        <FadeInSection>
          <h2 className="text-center text-3xl font-bold mb-12">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h2>
          <div className="max-w-4xl mx-auto px-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã */}
              <a 
                href="/masters" 
                className="group border-2 border-[#344EAD] hover:bg-[#344EAD] transition-all duration-300 rounded-2xl p-8 flex flex-col items-center justify-center min-h-[200px] hover:shadow-lg"
              >
                <div className="text-center">
                  <h3 className="text-2xl font-bold text-[#344EAD] group-hover:text-white mb-4">
                    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è <br/> –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
                  </h3>
                  <p className="text-gray-600 group-hover:text-gray-200">
                    –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–∑–∏–∫–∏
                  </p>
                </div>
              </a>

              {/* –û–ª–∏–º–ø–∏–∞–¥–∞ */}
              <a 
                href="/olimpiads" 
                className="group border-2 border-[#344EAD] hover:bg-[#344EAD] transition-all duration-300 rounded-2xl p-8 flex flex-col items-center justify-center min-h-[200px] hover:shadow-lg"
              >
                <div className="text-center">
                  <h3 className="text-2xl font-bold text-[#344EAD] group-hover:text-white mb-4">
                    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è <br/> –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã
                  </h3>
                  <p className="text-gray-600 group-hover:text-gray-200">
                    –£—á–∞—Å—Ç–∏–µ –≤ –º–∏–Ω–∏-–æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –ø–æ —Ñ–∏–∑–∏–∫–µ
                  </p>
                </div>
              </a>
            </div>
          </div>
        </FadeInSection>
      </section>

      {/* Registration Section */}
      <section id="register" className="py-20 bg-white px-4">
        <FadeInSection>
          <h2 className="text-center text-3xl font-bold mb-12">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –§–∏–∑–§–µ—Å—Ç</h2>
          <div className="max-w-xl mx-auto grid gap-6">
            <select
              name="role"
              className="border border-gray-300 p-3 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-[#344EAD] focus:border-transparent"
              value={role}
              onChange={(e) => setRole(e.target.value as UserRole)}
              required
            >
              {USER_ROLES.map((role, idx) => (
                <option key={idx}>{role}</option>
              ))}
            </select>
            <input 
              name="name"
              className="border border-gray-300 p-3 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-[#344EAD] focus:border-transparent" 
              type="text" 
              placeholder="–§–ò–û" 
              value={formData.name}
              onChange={handleInputChange}
              required 
            />
            <input 
              name="email"
              className="border border-gray-300 p-3 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-[#344EAD] focus:border-transparent" 
              type="email" 
              placeholder="Email" 
              value={formData.email}
              onChange={handleInputChange}
              required 
            />
            <input 
              name="phone"
              className="border border-gray-300 p-3 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-[#344EAD] focus:border-transparent" 
              type="tel" 
              placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" 
              value={formData.phone}
              onChange={handleInputChange}
              required 
            />
            <input 
              name="city"
              className="border border-gray-300 p-3 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-[#344EAD] focus:border-transparent" 
              type="text" 
              placeholder="–ì–æ—Ä–æ–¥" 
              value={formData.city}
              onChange={handleInputChange}
              required 
            />
            {role === "–®–∫–æ–ª—å–Ω–∏–∫" && (
              <>
                <input 
                  name="school"
                  className="border border-gray-300 p-3 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-[#344EAD] focus:border-transparent" 
                  type="text" 
                  placeholder="–®–∫–æ–ª–∞" 
                  value={formData.school}
                  onChange={handleInputChange}
                  required
                />
                <input 
                  name="class"
                  className="border border-gray-300 p-3 rounded-xl w-full focus:outline-none focus:ring-2 focus:ring-[#344EAD] focus:border-transparent" 
                  type="number" 
                  placeholder="–ö–ª–∞—Å—Å (1-11)" 
                  min="1"
                  max="11"
                  value={formData.class}
                  onChange={handleInputChange}
                  required
                />
              </>
            )}
            <label className="flex items-center space-x-3">
              <input 
                name="agreement"
                type="checkbox" 
                checked={formData.agreement}
                onChange={handleInputChange}
                className="w-5 h-5 text-[#344EAD] rounded focus:ring-[#344EAD]"
                required 
              />
              <span className="text-gray-700">–Ø –¥–∞—é —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</span>
            </label>
            <button 
              className={`py-3 rounded-xl font-semibold transition w-full ${
                !isSubmitting
                  ? 'bg-[#344EAD] text-white hover:bg-[#2a3f92]'
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
              onClick={handleSubmit}
              disabled={isSubmitting}
            >
              {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
            </button>
            <p className="text-sm text-gray-600 text-center">
              –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ù–ì–£.
            </p>
          </div>
        </FadeInSection>
      </section>

      {/* Footer */}
      <Footer />

      {/* Modal */}
      <Modal 
        isOpen={isOpen} 
        onClose={closeModal}
        type={modalContent.type}
        title={modalContent.title}
        message={modalContent.message}
      />
    </main>
  );
}